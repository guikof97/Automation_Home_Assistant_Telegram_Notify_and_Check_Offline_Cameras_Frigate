# Automation Name and Description
alias: Notify and Check Offline Cameras
description: >
  Notifies on Telegram, the Home Assistant app, and Home Assistant interface
  when cameras go offline, with periodic notifications while the cameras
  remain offline.

# Triggers to activate the automation when any camera in the list goes offline
triggers:
  - entity_id:
      - camera.camera1
      - camera.camera2
      - camera.camera3
      - camera.camera4
      - camera.camera5
      - camera.camera6
      - camera.camera7
      - camera.camera8
      - camera.camera0_video_doorbell
    to: unavailable
    trigger: state

# Actions executed when the trigger is activated
actions:
  - delay: "{{ initial_delay }}" # Waits for the configured initial delay
  - condition: template
    value_template: >
      {% set offline_cameras = states | selectattr('entity_id', 'in',
      cameras_to_monitor) | selectattr('state', 'equalto', 'unavailable') |
      list %} {% set offline_cameras_more_than_1min = offline_cameras |
      selectattr('last_changed', 'lt', (now() - timedelta(minutes=1))) | list %}
      {{ offline_cameras_more_than_1min | length > 0 }}

  # Notification to the Home Assistant app listing offline cameras
  - data:
      message: >
        The following cameras went offline: \n {% set offline_cameras = states
        | selectattr('entity_id', 'in', cameras_to_monitor) |
        selectattr('state', 'equalto', 'unavailable') | list %} {% for camera in
        offline_cameras %} - {{ camera.entity_id.split('.')[1].replace('_', ' ')
        }} - Offline since {{ (camera.last_changed | as_datetime |
        as_local).strftime('%d/%m/%y at %H:%M:%S') }} ({{ ((as_timestamp(now())
        - as_timestamp(camera.last_changed)) / 60) | round(1) }} min) \n {%
        endfor %}
    action: notify.notify

  # Telegram notification with offline camera details
  - data:
      target: "{{ telegram_chat_id }}"
      message: >
        The following cameras went offline:

        {% set offline_cameras = states | selectattr('entity_id', 'in',
        cameras_to_monitor) | selectattr('state', 'equalto', 'unavailable')
        | list %} {% for camera in offline_cameras %} - *{{
        camera.entity_id.split('.')[1].replace('_', ' ') }}* - Offline since {{
        (camera.last_changed | as_datetime | as_local).strftime('%d/%m/%y at
        %H:%M:%S') }} ({{ ((as_timestamp(now()) -
        as_timestamp(camera.last_changed)) / 60) | round(1) }} min)

        {% endfor %}
    action: telegram_bot.send_message

  # Persistent notification on Home Assistant interface
  - data:
      title: Offline Cameras
      message: >
        The following cameras went offline:

        {% set offline_cameras = states | selectattr('entity_id', 'in',
        cameras_to_monitor) | selectattr('state', 'equalto', 'unavailable')
        | list %} {% for camera in offline_cameras %} - **{{
        camera.entity_id.split('.')[1].replace('_', ' ') }}** - Offline since
        {{ (camera.last_changed | as_datetime | as_local).strftime('%d/%m/%y at
        %H:%M:%S') }} ({{ ((as_timestamp(now()) -
        as_timestamp(camera.last_changed)) / 60) | round(1) }} min)

        {% endfor %}
    action: persistent_notification.create

  # Waits for the verification period
  - delay: "{{ verification_period }}"

  # Repeats notifications every 5 minutes as long as there are offline cameras
  - repeat:
      while:
        - condition: template
          value_template: >
            {% set offline_cameras = states | selectattr('entity_id', 'in',
            cameras_to_monitor) | selectattr('state', 'equalto',
            'unavailable') | list %} {% set offline_cameras_more_than_1min =
            offline_cameras | selectattr('last_changed', 'lt', (now() -
            timedelta(minutes=1))) | list %} {{ offline_cameras_more_than_1min |
            length > 0 }}
      sequence:
        - data:
            message: >
              The following cameras are still offline: \n {% set
              offline_cameras = states | selectattr('entity_id', 'in',
              cameras_to_monitor) | selectattr('state', 'equalto',
              'unavailable') | list %} {% set offline_cameras_more_than_1min =
              offline_cameras | selectattr('last_changed', 'lt', (now() -
              timedelta(minutes=1))) | list %} {% for camera in
              offline_cameras_more_than_1min %} - {{
              camera.entity_id.split('.')[1].replace('_', ' ') }} - Offline since
              {{ (camera.last_changed | as_datetime |
              as_local).strftime('%d/%m/%y at %H:%M:%S') }} ({{ ((as_timestamp(now()) -
              as_timestamp(camera.last_changed)) / 60) | round(1) }} min) \n
              {% endfor %}
          action: notify.notify

        - data:
            target: "{{ telegram_chat_id }}"
            message: >
              The following cameras are still offline:

              {% set offline_cameras = states | selectattr('entity_id', 'in',
              cameras_to_monitor) | selectattr('state', 'equalto',
              'unavailable') | list %} {% set offline_cameras_more_than_1min =
              offline_cameras | selectattr('last_changed', 'lt', (now() -
              timedelta(minutes=1))) | list %} {% for camera in
              offline_cameras_more_than_1min %} - *{{
              camera.entity_id.split('.')[1].replace('_', ' ') }}* - Offline
              since {{ (camera.last_changed | as_datetime |
              as_local).strftime('%d/%m/%y at %H:%M:%S') }} ({{ ((as_timestamp(now()) -
              as_timestamp(camera.last_changed)) / 60) | round(1) }} min)

              {% endfor %}
          action: telegram_bot.send_message

        - data:
            title: Offline Cameras (Continuous Verification)
            message: >
              The following cameras are still offline:

              {% set offline_cameras = states | selectattr('entity_id', 'in',
              cameras_to_monitor) | selectattr('state', 'equalto',
              'unavailable') | list %} {% set offline_cameras_more_than_1min =
              offline_cameras | selectattr('last_changed', 'lt', (now() -
              timedelta(minutes=1))) | list %} {% for camera in
              offline_cameras_more_than_1min %} - **{{
              camera.entity_id.split('.')[1].replace('_', ' ') }}** - Offline
              since {{ (camera.last_changed | as_datetime |
              as_local).strftime('%d/%m/%y at %H:%M:%S') }} ({{ ((as_timestamp(now()) -
              as_timestamp(camera.last_changed)) / 60) | round(1) }} min)

              {% endfor %}
          action: persistent_notification.create

        - delay: "{{ verification_period }}"

  # Notify that all cameras are online again
  - data:
      message: All cameras are online.
    action: notify.notify

  - data:
      target: "{{ telegram_chat_id }}"
      message: All cameras are *online*.
    action: telegram_bot.send_message

  - data:
      title: Operational State Online
      message: All cameras are **online**.
    action: persistent_notification.create

# Variables
variables:
  telegram_chat_id: "-***************"
  verification_period: "00:05:00"
  initial_delay: "00:01:10"
  cameras_to_monitor:
    - camera.camera1
    - camera.camera2
    - camera.camera3
    - camera.camera4
    - camera.camera5
    - camera.camera6
    - camera.camera7
    - camera.camera8
    - camera.camera0_video_doorbell
mode: single
