alias: Notificar e Verificar Câmeras Offline
description: >
  Notifica no Telegram, no aplicativo e na interface do Home Assistant quando
  câmeras ficam offline, com notificações periódicas enquanto as câmeras
  estiverem offline.
triggers:
  # Monitora o estado das câmeras especificadas, disparando quando o estado muda para "unavailable"
  - entity_id:
      - camera.camera1
      - camera.camera2
      - camera.camera3
      - camera.camera4
      - camera.camera5
      - camera.camera6
      - camera.camera7
      - camera.camera8
      - camera.camera0_video_doorbell
    to: unavailable
    platform: state
actions:
  # Atraso inicial para evitar falsos positivos
  - delay: "{{ atraso_inicial }}"
  
  # Garante que as câmeras estejam offline há mais de 1 minuto antes de notificar
  - condition: template
    value_template: >
      {% set cameras_offline = states.camera | selectattr('state', 'in', ['unavailable', 'offline', 'disconnected']) | list %} 
      {% set cameras_offline_mais_1min = cameras_offline | selectattr('last_changed', 'lt', (now() - timedelta(minutes=1))) | list %} 
      {{ cameras_offline_mais_1min | length > 0 }}
  
  # Variáveis: Composição da mensagem de notificação
  - variables:
      mensagem_notificacao: >-
        As seguintes câmeras estão offline:
        {% set cameras_offline = states.camera | selectattr('state', 'in', ['unavailable', 'offline', 'disconnected']) | list %} {%
        set cameras_offline_mais_1min = cameras_offline | selectattr('last_changed', 'lt', (now() - timedelta(minutes=1))) | list %} {%
        for camera in cameras_offline_mais_1min %}
          - *{{ camera.entity_id.split('.')[1].replace('_', ' ') }}*: {{
           (camera.last_changed | as_datetime | as_local).strftime('%d/%m/%y às %H:%M:%S') }} ({{
            ((as_timestamp(now()) - as_timestamp(camera.last_changed)) / 60) | round(1) }} min). {% endfor %}
  
  # Notifica pelo Telegram
  - service: telegram_bot.send_message
    data:
      target: "{{ telegram_chat_id }}"
      message: "{{ mensagem_notificacao }}"
  
  # Notificação persistente na interface do Home Assistant
  - service: persistent_notification.create
    data:
      title: Câmeras Offline
      message: "{{ mensagem_notificacao | replace('*', '**') }}"
  
  # Notificação no aplicativo
  - service: notify.notify
    data:
      message: |-
        {{ mensagem_notificacao | replace('*', '') }}
  
  # Repete notificações periodicamente enquanto houver câmeras offline
  - delay: "{{ periodo_verificacao }}"
  - repeat:
      while:
        # Verifica se ainda existem câmeras offline
        - condition: template
          value_template: >
            {% set cameras_offline = states.camera | selectattr('state', 'in', ['unavailable', 'offline', 'disconnected']) | list %} 
            {% set cameras_offline_mais_1min = cameras_offline | selectattr('last_changed', 'lt', (now() - timedelta(minutes=1))) | list %} 
            {{ cameras_offline_mais_1min | length > 0 }}
      sequence:
        - variables:
            mensagem_notificacao2: >-
              As seguintes câmeras ainda estão offline:
              {% set cameras_offline = states.camera | selectattr('state', 'in', ['unavailable', 'offline', 'disconnected']) | list %} {%
              set cameras_offline_mais_1min = cameras_offline | selectattr('last_changed', 'lt', (now() - timedelta(minutes=1))) | list %} {%
              for camera in cameras_offline_mais_1min %}
                - *{{ camera.entity_id.split('.')[1].replace('_', ' ') }}*: {{
                 (camera.last_changed | as_datetime | as_local).strftime('%d/%m/%y às %H:%M:%S') }} ({{
                  ((as_timestamp(now()) - as_timestamp(camera.last_changed)) / 60) | round(1) }} min). {% endfor %}
        # Notifica pelo Telegram
        - service: telegram_bot.send_message
          data:
            target: "{{ telegram_chat_id }}"
            message: "{{ mensagem_notificacao2 }}"
        # Notificação persistente
        - service: persistent_notification.create
          data:
            title: Câmeras Offline (Verificação Contínua)
            message: "{{ mensagem_notificacao2 | replace('*', '**') }}"
        # Notificação no aplicativo
        - service: notify.notify
          data:
            message: |-
              {{ mensagem_notificacao2 | replace('*', '') }}
        - delay: "{{ periodo_verificacao }}"
  
  # Notifica quando todas as câmeras voltarem online
  - service: notify.notify
    data:
      message: Todas as câmeras estão online.
  - service: telegram_bot.send_message
    data:
      target: "{{ telegram_chat_id }}"
      message: Todas as câmeras estão *online*.
  - service: persistent_notification.create
    data:
      title: Estado Operacional Online
      message: Todas as câmeras estão **online**.
  
# Variáveis para Telegram e tempo (substitua "SEU_CHAT_ID" pelo ID real do Telegram)
variables:
  telegram_chat_id: "SEU_CHAT_ID"
  periodo_verificacao: "00:05:00" # Período para verificações contínuas
  atraso_inicial: "00:01:05" # Atraso inicial para confirmar o estado offline
mode: single
